#include <iostream>
using namespace std;

class Complex {
private:
    double real;
    double imag;

public:
  
    Complex() : real(0), imag(0) {}
    Complex(double r, double i) : real(r), imag(i) {}

    double getReal() const { return real; }
    double getImag() const { return imag; }

    friend Complex operator+(const Complex& c1, const Complex& c2);
    friend Complex operator-(const Complex& c1, const Complex& c2);
    friend Complex operator*(const Complex& c1, const Complex& c2);
    friend Complex operator/(const Complex& c1, const Complex& c2);

    friend ostream& operator<<(ostream& os, const Complex& c);
};

Complex operator+(const Complex& c1, const Complex& c2) {
    return Complex(c1.real + c2.real, c1.imag + c2.imag);
}
Complex operator-(const Complex& c1, const Complex& c2) {
    return Complex(c1.real - c2.real, c1.imag - c2.imag);
}

Complex operator*(const Complex& c1, const Complex& c2) {
    double realPart = c1.real * c2.real - c1.imag * c2.imag;
    double imagPart = c1.real * c2.imag + c1.imag * c2.real;
    return Complex(realPart, imagPart);
}

Complex operator/(const Complex& c1, const Complex& c2) {
    double denominator = c2.real * c2.real + c2.imag * c2.imag;
    double realPart = (c1.real * c2.real + c1.imag * c2.imag) / denominator;
    double imagPart = (c1.imag * c2.real - c1.real * c2.imag) / denominator;
    return Complex(realPart, imagPart);
}
ostream& operator<<(ostream& os, const Complex& c) {
    if (c.imag >= 0)
        os << c.real << " + " << c.imag << "i";
    else
        os << c.real << " - " << -c.imag << "i";
    return os;
}

int main() {
    Complex c1(2, 3);
    Complex c2(1, -2);

    Complex sum = c1 + c2;
    cout << "Sum: " << sum << endl;

    Complex diff = c1 - c2;
    cout << "Difference: " << diff << endl;

    Complex product = c1 * c2;
    cout << "Product: " << product << endl;

    Complex quotient = c1 / c2;
    cout << "Quotient: " << quotient << endl;

    return 0;
}
